{"version":3,"sources":["components/TodoTextInput.js","components/Header.js","constants/ActionTypes.js","actions/index.js","containers/Header.js","components/Link.js","containers/FilterLink.js","constants/TodoFilters.js","components/Footer.js","components/TodoItem.js","components/TodoList.js","selectors/index.js","containers/VisibleTodoList.js","components/MainSection.js","containers/MainSection.js","components/App.js","reducers/todos.js","reducers/visibilityFilter.js","reducers/index.js","index.js"],"names":["TodoTextInput","state","text","props","handleSubmit","e","target","value","trim","which","onSave","newTodo","setState","handleChange","handleBlur","className","classnames","edit","this","editing","type","placeholder","autoFocus","onBlur","onChange","onKeyDown","Component","Header","addTodo","length","ADD_TODO","DELETE_TODO","EDIT_TODO","COMPLETE_TODO","COMPLETE_ALL_TODOS","CLEAR_COMPLETED","SET_VISIBILITY_FILTER","types","deleteTodo","id","editTodo","completeTodo","completeAllTodos","clearCompleted","setVisibilityFilter","filter","connect","Link","active","children","setFilter","selected","style","cursor","onClick","ownProps","visibilityFilter","dispatch","SHOW_ALL","SHOW_COMPLETED","SHOW_ACTIVE","FILTER_TITLES","Footer","activeCount","completedCount","onClearCompleted","itemWord","Object","keys","map","FilterLink","TodoItem","handleDoubleClick","handleSave","element","todo","checked","completed","onDoubleClick","TodoList","filteredTodos","actions","getTodos","todos","getVisibleTodos","createSelector","t","Error","getCompletedTodoCount","reduce","count","VisibleTodoList","bindActionCreators","TodoActions","MainSection","todosCount","readOnly","App","initialState","action","rootReducer","combineReducers","maxId","Math","max","areAllMarked","every","store","createStore","reducer","render","document","getElementById"],"mappings":"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","file":"static/js/main.84fb895a.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\n\nexport default class TodoTextInput extends Component {\n  static propTypes = {\n    onSave: PropTypes.func.isRequired,\n    text: PropTypes.string,\n    placeholder: PropTypes.string,\n    editing: PropTypes.bool,\n    newTodo: PropTypes.bool\n  }\n\n  state = {\n    text: this.props.text || ''\n  }\n\n  handleSubmit = e => {\n    const text = e.target.value.trim()\n    if (e.which === 13) {\n      this.props.onSave(text)\n      if (this.props.newTodo) {\n        this.setState({ text: '' })\n      }\n    }\n  }\n\n  handleChange = e => {\n    this.setState({ text: e.target.value })\n  }\n\n  handleBlur = e => {\n    if (!this.props.newTodo) {\n      this.props.onSave(e.target.value)\n    }\n  }\n\n  render() {\n    return (\n      <input className={\n        classnames({\n          edit: this.props.editing,\n          'new-todo': this.props.newTodo\n        })}\n        type=\"text\"\n        placeholder={this.props.placeholder}\n        autoFocus={true}\n        value={this.state.text}\n        onBlur={this.handleBlur}\n        onChange={this.handleChange}\n        onKeyDown={this.handleSubmit} />\n    )\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport TodoTextInput from './TodoTextInput'\n\nconst Header = ({ addTodo }) => (\n  <header className=\"header\">\n    <h1>todos</h1>\n    <TodoTextInput\n      newTodo\n      onSave={(text) => {\n        if (text.length !== 0) {\n          addTodo(text)\n        }\n      }}\n      placeholder=\"What needs to be done?\"\n    />\n  </header>\n)\n\nHeader.propTypes = {\n  addTodo: PropTypes.func.isRequired\n}\n\nexport default Header\n","export const ADD_TODO = 'ADD_TODO'\nexport const DELETE_TODO = 'DELETE_TODO'\nexport const EDIT_TODO = 'EDIT_TODO'\nexport const COMPLETE_TODO = 'COMPLETE_TODO'\nexport const COMPLETE_ALL_TODOS = 'COMPLETE_ALL_TODOS'\nexport const CLEAR_COMPLETED = 'CLEAR_COMPLETED'\nexport const SET_VISIBILITY_FILTER = 'SET_VISIBILITY_FILTER'\n","import * as types from '../constants/ActionTypes'\n\nexport const addTodo = text => ({ type: types.ADD_TODO, text })\nexport const deleteTodo = id => ({ type: types.DELETE_TODO, id })\nexport const editTodo = (id, text) => ({ type: types.EDIT_TODO, id, text })\nexport const completeTodo = id => ({ type: types.COMPLETE_TODO, id })\nexport const completeAllTodos = () => ({ type: types.COMPLETE_ALL_TODOS })\nexport const clearCompleted = () => ({ type: types.CLEAR_COMPLETED })\nexport const setVisibilityFilter = filter => ({ type: types.SET_VISIBILITY_FILTER, filter})\n","import { connect } from 'react-redux'\nimport Header from '../components/Header'\nimport { addTodo } from '../actions'\n\nexport default connect(null, { addTodo })(Header)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\n\nconst Link = ({ active, children, setFilter }) =>\n  (\n    // eslint-disable jsx-a11y/anchor-is-valid\n    <a\n      className={classnames({ selected: active })}\n      style={{ cursor: 'pointer' }}\n      onClick={() => setFilter()}\n    >\n      {children}\n    </a>\n  )\n\n\nLink.propTypes = {\n  active: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n  setFilter: PropTypes.func.isRequired\n}\n\nexport default Link\n","import { connect } from 'react-redux'\nimport { setVisibilityFilter } from '../actions'\nimport Link from '../components/Link'\n\nconst mapStateToProps = (state, ownProps) => ({\n  active: ownProps.filter === state.visibilityFilter\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  setFilter: () => {\n    dispatch(setVisibilityFilter(ownProps.filter))\n  }\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Link)\n","export const SHOW_ALL = 'show_all'\nexport const SHOW_COMPLETED = 'show_completed'\nexport const SHOW_ACTIVE = 'show_active'\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport FilterLink from '../containers/FilterLink'\nimport { SHOW_ALL, SHOW_COMPLETED, SHOW_ACTIVE } from '../constants/TodoFilters'\n\nconst FILTER_TITLES = {\n  [SHOW_ALL]: 'All',\n  [SHOW_ACTIVE]: 'Active',\n  [SHOW_COMPLETED]: 'Completed'\n}\n\nconst Footer = (props) => {\n  const { activeCount, completedCount, onClearCompleted } = props\n  const itemWord = activeCount === 1 ? 'item' : 'items'\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        <strong>{activeCount || 'No'}</strong> {itemWord} left\n      </span>\n      <ul className=\"filters\">\n        {Object.keys(FILTER_TITLES).map(filter =>\n          <li key={filter}>\n            <FilterLink filter={filter}>\n              {FILTER_TITLES[filter]}\n            </FilterLink>\n          </li>\n        )}\n      </ul>\n      {\n        !!completedCount &&\n        <button\n          className=\"clear-completed\"\n          onClick={onClearCompleted}\n        >Clear completed</button>\n        \n      }\n    </footer>\n  )\n}\n\nFooter.propTypes = {\n  completedCount: PropTypes.number.isRequired,\n  activeCount: PropTypes.number.isRequired,\n  onClearCompleted: PropTypes.func.isRequired,\n}\n\nexport default Footer\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport TodoTextInput from './TodoTextInput'\n\nexport default class TodoItem extends Component {\n  static propTypes = {\n    todo: PropTypes.object.isRequired,\n    editTodo: PropTypes.func.isRequired,\n    deleteTodo: PropTypes.func.isRequired,\n    completeTodo: PropTypes.func.isRequired\n  }\n\n  state = {\n    editing: false\n  }\n\n  handleDoubleClick = () => {\n    this.setState({ editing: true })\n  }\n\n  handleSave = (id, text) => {\n    if (text.length === 0) {\n      this.props.deleteTodo(id)\n    } else {\n      this.props.editTodo(id, text)\n    }\n    this.setState({ editing: false })\n  }\n\n  render() {\n    const { todo, completeTodo, deleteTodo } = this.props\n\n    let element\n    if (this.state.editing) {\n      element = (\n        <TodoTextInput text={todo.text}\n                       editing={this.state.editing}\n                       onSave={(text) => this.handleSave(todo.id, text)} />\n      )\n    } else {\n      element = (\n        <div className=\"view\">\n          <input className=\"toggle\"\n                 type=\"checkbox\"\n                 checked={todo.completed}\n                 onChange={() => completeTodo(todo.id)} />\n          <label onDoubleClick={this.handleDoubleClick}>\n            {todo.text}\n          </label>\n          <button className=\"destroy\"\n                  onClick={() => deleteTodo(todo.id)} />\n        </div>\n      )\n    }\n\n    return (\n      <li className={classnames({\n        completed: todo.completed,\n        editing: this.state.editing\n      })}>\n        {element}\n      </li>\n    )\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport TodoItem from './TodoItem'\n\nconst TodoList = ({ filteredTodos, actions }) => (\n  <ul className=\"todo-list\">\n    {filteredTodos.map(todo =>\n      <TodoItem key={todo.id} todo={todo} {...actions} />\n    )}\n  </ul>\n)\n\nTodoList.propTypes = {\n  filteredTodos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n    text: PropTypes.string.isRequired\n  }).isRequired).isRequired,\n  actions: PropTypes.object.isRequired\n}\n\nexport default TodoList\n","import { createSelector } from 'reselect'\nimport { SHOW_ALL, SHOW_COMPLETED, SHOW_ACTIVE } from '../constants/TodoFilters'\n\nconst getVisibilityFilter = state => state.visibilityFilter\nconst getTodos = state => state.todos\n\nexport const getVisibleTodos = createSelector(\n  [getVisibilityFilter, getTodos],\n  (visibilityFilter, todos) => {\n    switch (visibilityFilter) {\n      case SHOW_ALL:\n        return todos\n      case SHOW_COMPLETED:\n        return todos.filter(t => t.completed)\n      case SHOW_ACTIVE:\n        return todos.filter(t => !t.completed)\n      default:\n        throw new Error('Unknown filter: ' + visibilityFilter)\n    }\n  }\n)\n\nexport const getCompletedTodoCount = createSelector(\n  [getTodos],\n  todos => (\n    todos.reduce((count, todo) =>\n      todo.completed ? count + 1 : count,\n      0\n    )\n  )\n)","import { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport * as TodoActions from '../actions'\nimport TodoList from '../components/TodoList'\nimport { getVisibleTodos } from '../selectors'\n\nconst mapStateToProps = state => ({\n  filteredTodos: getVisibleTodos(state)\n})\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators(TodoActions, dispatch)\n})\n\n\nconst VisibleTodoList = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoList)\n\nexport default VisibleTodoList\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Footer from './Footer'\nimport VisibleTodoList from '../containers/VisibleTodoList'\n\nconst MainSection = ({ todosCount, completedCount, actions }) =>\n  (\n    <section className=\"main\">\n      {\n        !!todosCount && \n        <span>\n          <input\n            className=\"toggle-all\"\n            type=\"checkbox\"\n            checked={completedCount === todosCount}\n            readOnly\n          />\n          <label onClick={actions.completeAllTodos}/>\n        </span>\n      }\n      <VisibleTodoList />\n      {\n        !!todosCount &&\n        <Footer\n          completedCount={completedCount}\n          activeCount={todosCount - completedCount}\n          onClearCompleted={actions.clearCompleted}\n        />\n      }\n    </section>\n  )\n\nMainSection.propTypes = {\n  todosCount: PropTypes.number.isRequired,\n  completedCount: PropTypes.number.isRequired,\n  actions: PropTypes.object.isRequired\n}\n\nexport default MainSection;","import { connect } from 'react-redux'\nimport * as TodoActions from '../actions'\nimport { bindActionCreators } from 'redux'\nimport MainSection from '../components/MainSection'\nimport { getCompletedTodoCount } from '../selectors'\n\n\nconst mapStateToProps = state => ({\n  todosCount: state.todos.length,\n  completedCount: getCompletedTodoCount(state)\n})\n\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators(TodoActions, dispatch)\n})\n\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MainSection)\n\n","import React from 'react'\nimport Header from '../containers/Header'\nimport MainSection from '../containers/MainSection'\n\nconst App = () => (\n  <div>\n    <Header />\n    <MainSection />\n  </div>\n)\n\nexport default App\n","import {\n  ADD_TODO,\n  DELETE_TODO,\n  EDIT_TODO,\n  COMPLETE_TODO,\n  COMPLETE_ALL_TODOS,\n  CLEAR_COMPLETED\n} from '../constants/ActionTypes'\n\nconst initialState = [\n  {\n    text: 'Use Redux',\n    completed: false,\n    id: 0\n  }\n]\n\nexport default function todos(state = initialState, action) {\n  switch (action.type) {\n    case ADD_TODO:\n      return [\n        ...state,\n        {\n          id: state.reduce((maxId, todo) => Math.max(todo.id, maxId), -1) + 1,\n          completed: false,\n          text: action.text\n        }\n      ]\n\n    case DELETE_TODO:\n      return state.filter(todo =>\n        todo.id !== action.id\n      )\n\n    case EDIT_TODO:\n      return state.map(todo =>\n        todo.id === action.id ?\n          { ...todo, text: action.text } :\n          todo\n      )\n\n    case COMPLETE_TODO:\n      return state.map(todo =>\n        todo.id === action.id ?\n          { ...todo, completed: !todo.completed } :\n          todo\n      )\n\n    case COMPLETE_ALL_TODOS:\n      const areAllMarked = state.every(todo => todo.completed)\n      return state.map(todo => ({\n        ...todo,\n        completed: !areAllMarked\n      }))\n\n    case CLEAR_COMPLETED:\n      return state.filter(todo => todo.completed === false)\n\n    default:\n      return state\n  }\n}\n","import { SET_VISIBILITY_FILTER } from '../constants/ActionTypes'\nimport { SHOW_ALL } from '../constants/TodoFilters'\n\nconst visibilityFilter = (state = SHOW_ALL, action) => {\n  switch (action.type) {\n    case SET_VISIBILITY_FILTER:\n      return action.filter\n    default:\n      return state\n  }\n}\n\nexport default visibilityFilter","import { combineReducers } from 'redux'\nimport todos from './todos'\nimport visibilityFilter from './visibilityFilter'\n\nconst rootReducer = combineReducers({\n  todos,\n  visibilityFilter\n})\n\nexport default rootReducer\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport reducer from './reducers'\nimport 'todomvc-app-css/index.css'\n\nconst store = createStore(reducer)\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}